---
layout: post
title:  "初步接触函数式编程"
---
第一次接触函数式编程的概念，是在水木社区的函数式编程版面。我当时也是刚进入软件开发这个行业没多久，主要是学习了c和c++，对其他语言知之甚少。在搜索引擎中搜索这个概念，也是没有完全理解，只是记得了其中一个特性，就是引用透明性，跟数学中的函数有点像，也跟c里面所谓的可重入函数有点像。现在才知道，其实不是一回事。函数式中的函数，要比可重入函数严格一些。

直到去年，老赖送我一本书《计算机程序的构造和解释》，我才真正开始对函数式编程有点了解。这本书是国外的计算机经典教材，译者是北大著名教授裘宗燕先生。虽然跟一般性的介绍某种语言的书相比，这本书读起来晦涩难懂，但是我还是硬着头皮过完了一遍。我之后明白了函数式语言与现在占主导地位的语言，有多么大的不同。书中示例用的scheme，清晰的括号让我们省去了记忆运算符优先级的麻烦。函数和数据，在这里得到了高度的统一。基于序对就可以构造出复杂的数据结构，让人不得不感叹这语言惊人的表达能力，就好像魔法可以构造出变幻无穷的世界一样。惰性求值的实现示例，让人眼前一亮。总之，这本书展现的是奇妙的计算机世界，而不仅仅是编程。这其中强有力的工具，便是抽象。

函数式编程语言有很多种，从古老的lisp，到较现代的Haskell，Scala，Clojure等。其中Haskell是最著名的“纯”的函数式语言。《Haskell趣学指南》是一个不错的入门学习资料。我断断续续的终于读完了一遍。Haskell明确的区别了纯函数和非纯的函数，在使用纯函数的时候，你根本不用担心副作用。他支持惰性求值，没有用到的结果，根本就没有计算。他有强大的类型推导系统，类型声明可以不写。你甚至可以写完函数，通过Haskell解释器ghci告诉你函数类型。函数的不完全调用，也是一个让人眼前一亮的特性。比如+运算符，只给一个参数(3+)，那么这也是一个函数，表示给一个数加3。在这种强大的表达能力面前，c++里面的functor，只不过是小玩具罢了，而且难用得多。函数调用的模式匹配也非常有意思。你甚至不需要if来判断递归的终止条件。当然，有些复杂的概念也非常难以理解，比如monad，我现在还是云里雾里的，需要有时间多学习学习。

函数式应该是编程未来发展的趋势。实际上，正如老赖所说的，现在占主导的语言所宣扬的某些特性，不过是函数式语言里面的一些老掉牙的曲子罢了。函数式虽然由于各种原因，现在没有占据主导地位，但是他内在的逻辑严密性，使得他最终肯定会获得广阔的天地。
